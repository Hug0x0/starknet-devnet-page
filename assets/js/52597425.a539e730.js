"use strict";(self.webpackChunkstarknet_devnet=self.webpackChunkstarknet_devnet||[]).push([[825],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,v=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(v,l(l({ref:t},c),{},{components:n})):r.createElement(v,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5640:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:16},l="Development",i={unversionedId:"guide/development",id:"guide/development",title:"Development",description:"If you're a developer willing to contribute, be sure to have installed Poetry and all the dependency packages by running the following script. You are expected to have npm.",source:"@site/docs/guide/development.md",sourceDirName:"guide",slug:"/guide/development",permalink:"/starknet-devnet-page/docs/guide/development",draft:!1,editUrl:"https://github.com/Shard-Labs/starknet-devnet/docs/guide/development.md",tags:[],version:"current",sidebarPosition:16,frontMatter:{sidebar_position:16},sidebar:"tutorialSidebar",previous:{title:"Devnet speed-up troubleshooting",permalink:"/starknet-devnet-page/docs/guide/devnet-speed-up"}},p={},s=[{value:"Development - Run",id:"development---run",level:2},{value:"Development - Run in debug mode",id:"development---run-in-debug-mode",level:2},{value:"Development - Lint",id:"development---lint",level:2},{value:"Development - Test",id:"development---test",level:2},{value:"Development - Check versioning consistency",id:"development---check-versioning-consistency",level:2},{value:"Development - Working with a local version of cairo-lang",id:"development---working-with-a-local-version-of-cairo-lang",level:2},{value:"Development - Updating accounts",id:"development---updating-accounts",level:2},{value:"Development - Build",id:"development---build",level:2}],c={toc:s};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"development"},"Development"),(0,a.kt)("p",null,"If you're a developer willing to contribute, be sure to have installed ",(0,a.kt)("a",{parentName:"p",href:"https://pypi.org/project/poetry/"},(0,a.kt)("strong",{parentName:"a"},"Poetry"))," and all the dependency packages by running the following script. You are expected to have ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/"},(0,a.kt)("strong",{parentName:"a"},"npm")),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"./scripts/install_dev_tools.sh\n")),(0,a.kt)("h2",{id:"development---run"},"Development - Run"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"poetry run starknet-devnet\n")),(0,a.kt)("h2",{id:"development---run-in-debug-mode"},"Development - Run in debug mode"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"./scripts/starknet_devnet_debug.sh\n")),(0,a.kt)("h2",{id:"development---lint"},"Development - Lint"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"./scripts/lint.sh\n")),(0,a.kt)("h2",{id:"development---test"},"Development - Test"),(0,a.kt)("p",null,"When running tests locally, do it from the project root:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./scripts/compile_contracts.sh # first generate the artifacts\n\n./scripts/test.sh [TEST_CASE] # parallelized testing - using auto detected number of CPU cores\n\npoetry run pytest -s -v test/ # for more verbose output\n\npoetry run pytest test/<TEST_FILE> # for a single file\n\npoetry run pytest test/<TEST_FILE>::<TEST_CASE> # for a single test case\n")),(0,a.kt)("h2",{id:"development---check-versioning-consistency"},"Development - Check versioning consistency"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"./scripts/check_versions.sh\n")),(0,a.kt)("h2",{id:"development---working-with-a-local-version-of-cairo-lang"},"Development - Working with a local version of cairo-lang"),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"pyproject.toml")," under ",(0,a.kt)("inlineCode",{parentName:"p"},"[tool.poetry.dependencies]")," specify"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'cairo-lang = { path = "your-cairo-lang-package.zip" }\n')),(0,a.kt)("h2",{id:"development---updating-accounts"},"Development - Updating accounts"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Set up ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/OpenZeppelin/cairo-contracts/"},"https://github.com/OpenZeppelin/cairo-contracts/")," locally"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git clone ... && pip install cairo-nile && nile init")))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"git checkout")," to desired version")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"nile compile --directory src"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Copy and minify ",(0,a.kt)("inlineCode",{parentName:"p"},"artifacts/Account.json")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"artifacts/abi/Account.json"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Update the precalculated hash"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Predeployed account addresses should be intact"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Update directory/file names containing the version")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Update expected test paths and addresses")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Update docs"))),(0,a.kt)("h2",{id:"development---build"},"Development - Build"),(0,a.kt)("p",null,"You don't need to build anything to be able to run locally, but if you need the ",(0,a.kt)("inlineCode",{parentName:"p"},"*.whl")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"*.tar.gz")," artifacts, run"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"poetry build\n")))}d.isMDXComponent=!0}}]);